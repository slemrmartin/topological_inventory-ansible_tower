#!/usr/bin/env ruby

lib = File.expand_path("../lib", __dir__)
$LOAD_PATH.unshift(lib) unless $LOAD_PATH.include?(lib)

STDOUT.sync = true

require "bundler/setup"
require "topological_inventory/ansible_tower/targeted_refresh/worker"
require "topological_inventory/ansible_tower/targeted_refresh/metrics"
require "topological_inventory-ingress_api-client"
require "topological_inventory/providers/common/clowder_config"

def parse_args
  require 'optimist'
  Optimist.options do
    opt :queue_host, "Kafka messaging: hostname or IP", :type => :string, :default => ENV["QUEUE_HOST"] || "localhost"
    opt :queue_port, "Kafka messaging: port", :type => :integer, :default => (ENV["QUEUE_PORT"] || 9092).to_i
    opt :ingress_api_host, "Ingress API service URL",
        :type => :string, :default => ENV["TOPOLOGICAL_INVENTORY_INGRESS_API_SERVICE_HOST"] || "localhost"
    opt :ingress_api_port, "Ingress API service URL port",
        :type => :int, :default => (ENV["TOPOLOGICAL_INVENTORY_INGRESS_API_SERVICE_PORT"] || 9292).to_i
    opt :metrics_port, "Port to expose the metrics endpoint on, 0 to disable metrics",
        :type => :integer, :default => (ENV["METRICS_PORT"] || 9394).to_i
    opt :sources_scheme, "Sources API scheme", :type => :string, :default => ENV["SOURCES_SCHEME"] || "http"
    opt :sources_host, "Sources API host name", :type => :string, :default => ENV["SOURCES_HOST"]
    opt :sources_port, "Sources API port", :type => :integer, :default => ENV["SOURCES_PORT"].to_i

    opt :receptor_controller_scheme, "Receptor Controller scheme", :type => :string, :default => ENV["RECEPTOR_CONTROLLER_SCHEME"] || "http"
    opt :receptor_controller_host, "Receptor Controller host", :type => :string, :default => ENV["RECEPTOR_CONTROLLER_HOST"] || "localhost"
    opt :receptor_controller_port, "Receptor Controller port", :type => :integer, :default => (ENV["RECEPTOR_CONTROLLER_PORT"] || 9090).to_i
    opt :receptor_controller_psk, "Pre shared key for auth with receptor controller", :type => :string, :default => ENV["RECEPTOR_CONTROLLER_PSK"]
  end
end

def check_args(args)
  %i[queue_host queue_port
     sources_scheme sources_host sources_port
     ingress_api_host ingress_api_port].each do |arg|
    Optimist.die arg, "can't be blank" if args[arg].blank?
    Optimist.die arg, "can't be zero" if arg.to_s.index('port').present? && args[arg].zero?
  end
end

args = parse_args
if TopologicalInventory::Providers::Common::ClowderConfig.clowder_enabled?
  TopologicalInventory::Providers::Common::ClowderConfig.fill_args_operations(args)
end
check_args(args)

TopologicalInventoryIngressApiClient.configure do |config|
  config.scheme = "http"
  config.host   = "#{args[:ingress_api_host]}:#{args[:ingress_api_port]}"
  config.logger = TopologicalInventory::AnsibleTower.logger
end

TopologicalInventory::AnsibleTower::MessagingClient.configure do |config|
  config.queue_host = args[:queue_host]
  config.queue_port = args[:queue_port]
end

SourcesApiClient.configure do |config|
  config.scheme = args[:sources_scheme] || "http"
  config.host   = "#{args[:sources_host]}:#{args[:sources_port]}"
end

ReceptorController::Client.configure do |config|
  config.controller_scheme = args[:receptor_controller_scheme]
  config.controller_host   = "#{args[:receptor_controller_host]}:#{args[:receptor_controller_port]}"
  config.queue_host        = args[:queue_host]
  config.queue_port        = args[:queue_port]
  config.queue_topic       = TopologicalInventory::Providers::Common::ClowderConfig.kafka_topic(config.queue_topic)
  config.pre_shared_key    = args[:receptor_controller_psk]
end

metrics = TopologicalInventory::AnsibleTower::TargetedRefresh::Metrics.new(args[:metrics_port])

Signal.trap("TERM") do
  metrics&.stop_server
  exit
end

begin
  targeted_collector = TopologicalInventory::AnsibleTower::TargetedRefresh::Worker.new(metrics)
  targeted_collector.run
rescue => err
  puts err
  raise
end
